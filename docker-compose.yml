services:
  postgres-api:
    image: postgres:latest
    container_name: postgres-api
    restart: always
    environment:
      POSTGRES_USER: ${API_PG_USER}
      POSTGRES_PASSWORD: ${API_PG_PASS}
      POSTGRES_DB: ${API_PG_DB}
    ports:
      - "5432:5432"
    networks:
      - my-network
    volumes:
      - api-data:/var/lib/postgresql/data_ltd

  postgres-auth:
    image: postgres:latest
    container_name: postgres-auth
    restart: always
    environment:
      POSTGRES_USER: ${AUTH_PG_USER}
      POSTGRES_PASSWORD: ${AUTH_PG_PASS}
      POSTGRES_DB: ${AUTH_PG_DB}
    ports:
      - "5433:5432"
    networks:
      - my-network
    volumes:
      - auth-data:/var/lib/postgresql/data_ltd

  backend-api:
    build: ./backend-api
    container_name: backend-api
    environment:
      DATABASE_HOST: postgres-api
      API_PG_USER: ${API_PG_USER}
      API_PG_PASS: ${API_PG_PASS}
      API_PG_DB: ${API_PG_DB}
    depends_on:
      - postgres-api
    ports:
      - "3001:3000"
    volumes:
      - ./backend-api:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - my-network

  backend-authentication:
    build: ./backend-authentication
    container_name: backend-authentication
    environment:
      DATABASE_HOST: postgres-auth
      AUTH_PG_USER: ${AUTH_PG_USER}
      AUTH_PG_PASS: ${AUTH_PG_PASS}
      AUTH_PG_DB: ${AUTH_PG_DB}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgres-auth
    ports:
      - "3002:3000"
    volumes:
      - ./backend-authentication:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - my-network

  frontend:
    build: ./frontend
    container_name: frontend
    depends_on:
      - backend-api
      - backend-authentication
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - my-network
  
networks:
  my-network:

volumes:
  auth-data:
  api-data:
